{"version":3,"sources":["Header/Header.js","Feed/Post/TagList/TagList.js","Feed/Post/Post.js","Feed/Feed.js","Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","src","style","height","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","TagList","this","props","tags","map","tag","Post","width","icon","faUserAlt","url","alt","likes","faHeart","title","format","unix","time","Feed","state","posts","loading","setState","fetch","then","res","json","sizeUnit","color","size","margin","post","image","userId","Number","created","Profile","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fb5e8bf.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Header.scss';\nimport {Link} from \"react-router-dom\";\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <Link className=\"nav-link\" to=\"/\">\n                        <img src=\"https://www.goddess-c.com/assets/images/marketing/instagram/2475.new-instagram-text-logo.png\" style={{height:'40px'}}/>\n                        <span className=\"sr-only\">(current)</span></Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                            data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                            aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item active\">\n                                <Link className=\"nav-link\" to=\"/profile\">Profile <span className=\"sr-only\">(current)</span></Link>\n                            </li>\n                            <li className=\"nav-item active\">\n                                <Link className=\"nav-link\" to=\"/activity\">Activity <span className=\"sr-only\">(current)</span></Link>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './TagList.scss';\n\nclass TagList extends Component {\n    render() {\n        return (\n            <div className=\"TagList\">\n                {this.props.tags.map(tag => {\n                    return <div className=\"tag\"> #{tag}</div>\n                })}\n            </div>\n        );\n    }\n}\n\nexport default TagList;","import React, {Component} from 'react';\nimport './Post.scss';\nimport Moment from 'react-moment';\nimport TagList from \"./TagList/TagList\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart } from '@fortawesome/free-regular-svg-icons'\nimport { faUserAlt } from '@fortawesome/free-solid-svg-icons'\n\nclass Post extends Component {\n    render() {\n        return (\n            <div className=\"Post\">\n                <div className=\"card\" style={{width: '400px',height: '550px'}}>\n                    <header className=\"header\">\n                        <div><FontAwesomeIcon icon={faUserAlt} className=\"icon-user\"/> </div>\n                    </header>\n                    <img src={this.props.url} className=\"card-img-top\" alt=\"...\"/>\n                        <div className=\"card-body\">\n                            <p className=\"card-text\">{this.props.likes} <FontAwesomeIcon icon={faHeart} className=\"icon\"/></p>\n                            <p className=\"card-text-title\">{this.props.title}</p>\n                            <TagList tags={this.props.tags} />\n                            <p className=\"card-text\"><small className=\"text-muted\">\n                                Last updated at <Moment format=\"HH:MM - MMM DD\" unix >{this.props.time}</Moment>\n                            </small></p>\n                        </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Post;","import React, {Component} from 'react';\nimport './Feed.scss'\nimport  Post from './Post/Post';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nclass Feed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts : [],\n            loading : false\n        }\n    }\n    componentDidMount() {\n        this.setState({loading: true});\n        fetch('https://my-json-server.typicode.com/evyros/fake-api/posts')\n            .then(res=> res.json())\n            .then(posts=>this.setState({posts, loading: false}))\n    }\n    render() {\n        return (\n            <div className=\"Feed\">\n                <div className=\"loading\">\n                    {this.state.loading ?\n                        <div>\n                            <BeatLoader\n                            sizeUnit={\"px\"}\n                            color={'#ff6377'}\n                            size={50}\n                            margin={2}\n                            loading={this.state.loading}/>\n                            <div>Loading...</div>\n                        </div> : null\n                    }\n                </div>\n                <div className=\"container\">\n                    {this.state.posts.map(post=>{\n                        return <Post url={post.image}\n                                     userId={post.userId}\n                                     title={post.title}\n                                     likes={post.likes}\n                                     tags={post.tags}\n                                     time={Number(post.created)}/>\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Feed;","import React, {Component} from 'react';\nimport './Profile.scss';\n\nclass Profile extends Component {\n    render() {\n        return (\n            <div className=\"Profile\">\n                Profile\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header/Header\";\nimport Feed from \"./Feed/Feed\";\nimport Profile from \"./Profile/Profile\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <Router>\n            <div className=\"App\">\n                <Header />\n                <main>\n                    <Switch>\n                        <Route path=\"/profile\">\n                            <Profile />\n                        </Route>\n                        <Route path=\"/activity\">\n\n                        </Route>\n                        <Route path=\"/\">\n                            <Feed />\n                        </Route>\n                    </Switch>\n                </main>\n            </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}